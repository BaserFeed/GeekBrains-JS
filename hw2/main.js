// 1. Дан код:                  
// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2
// d = b++; alert(d);           // 1
// c = (2+ ++a); alert(c);      // 5
// d = (2+ b++); alert(d);      // 4
// alert(a);                    // 3
// alert(b);                    // 3
//? Почему код даёт именно такие результаты?

// 1 строка: из-за префиксного оператора к переменной а прибавляется сначала 1, затем в переменную с записывается значение.
// 2 строка: из-за постфиксного оператора в переменную d записывается значение b, и лишь затем к переменной b прибавляется 1.
// 3 строка: к переменной а прибавляется сначала 1 и записывается новое значение(3). Затем прибавляется 2 и новое значение записывается в переменную с.
// 4 строка: к переменной b сначала прибавляется 2 и значение записывается в переменную d, и после этого в переменную b записывается ее старое значение +1.
// 5 и 6 строка: результат выполнения операций выше :)



//? 2. Чему будет равен x в примере ниже?
// var a = 2;
// var x = 1 + (a *= 2);   

//! X будет равен 5, т.к. оператор *= это сокращенный оператор, полностью он будет выглядеть 1 + (a = a * 2 ) = 1 + 4 = 5.



/* 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. */

// const = 9
// const = 4

// if (a >= 0 && b >= 0) {
//     alert(a - b)
// } else if (a < 0 && b < 0){
//     alert(a * b)
// } else{
//     alert(a + b)
// }       

// ### 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. 

// const a = 10

// switch (a) {
//    case 0:
//       alert("0")
//    case 1:
//       alert("1")
//    case 2:
//       alert("2")
//    case 3:
//       alert("3")
//    case 4:
//       alert("4")
//    case 5:
//       alert("5")
//    case 6:
//       alert("6")
//    case 7:
//       alert("7")
//    case 8:
//       alert("8")
//    case 9:
//       alert("9")
//    case 10:
//       alert("10")
//    case 11:
//       alert("11")
//    case 12:
//       alert("12")
//    case 13:
//       alert("13")
//    case 14:
//       alert("14")
//    case 15:
//       alert("15")
//    break
// }                

// ### 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. 

// let a = 2
// let b = 3

// function sum(a, b) {
//    return (a + b)
// }
// function diff(a, b) {
//    return (a - b)
// }
// function quot(a, b) {
//    return (a / b)
// }
// function comp(a, b) {
//    return (a * b)
// }

// ### 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch). 

// function mathOperation(arg1, arg2, operation){
//    switch(operation){
//       case sum:
//          return arg1 + arg2
//          break
//       case diff:
//          return arg1 - arg2
//          break
//       case quot:
//          return arg1 / arg2
//          break
//       case comp:
//          return arg1 * arg2
//          break
//      }
// }
